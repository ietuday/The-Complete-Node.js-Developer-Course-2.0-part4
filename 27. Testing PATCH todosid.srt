1
00:00:00,450 --> 00:00:06,330
In this video we well I guess more appropriately you are going to be writing to test cases that verify

2
00:00:06,330 --> 00:00:08,290
Passhe works as expected.

3
00:00:08,310 --> 00:00:12,330
We're going to take one to do that's not completed and make it complete and we'll take a second one

4
00:00:12,330 --> 00:00:15,120
that is complete and make it in complete.

5
00:00:15,150 --> 00:00:20,160
Now in order to do that we are going to need to tweak the seed data we have on our server test file

6
00:00:20,490 --> 00:00:23,060
the data are right here is to do items.

7
00:00:23,190 --> 00:00:28,500
Neither of them have the completed property specified which means it's going to default to false for

8
00:00:28,500 --> 00:00:29,350
the second item.

9
00:00:29,400 --> 00:00:31,010
We're going to go ahead and set.

10
00:00:31,290 --> 00:00:34,070
We're going to set completed equal to true.

11
00:00:34,140 --> 00:00:39,240
And we're also going to set completed at equal to whatever value we want.

12
00:00:39,330 --> 00:00:41,000
You can choose any number at all.

13
00:00:41,010 --> 00:00:47,250
I'm going to go ahead and use 3 3 3 and now we have 2 to do's that are going to let us toggle both ways

14
00:00:47,550 --> 00:00:49,290
to get started down below.

15
00:00:49,290 --> 00:00:51,520
I will help you create the describe it block.

16
00:00:51,540 --> 00:00:56,610
So we're on the same page there but you will be responsible for filling out the actual test cases.

17
00:00:56,610 --> 00:01:01,290
This video is basically going to be a challenge because we've done a lot of this stuff before.

18
00:01:01,290 --> 00:01:06,550
First up they describe a black We're going to describe this group of tests.

19
00:01:06,670 --> 00:01:10,850
We'll use the method followed by that you are allowed to do just that.

20
00:01:10,900 --> 00:01:16,500
Then we can go ahead and add our function and in here we can define our two test cases.

21
00:01:16,630 --> 00:01:22,150
The first test is going to take our first to do and set its text equal to something else and we'll change

22
00:01:22,150 --> 00:01:24,110
to complete it from false to true.

23
00:01:24,990 --> 00:01:32,460
It should update the to do we can provide our function with the Done argument right here and I'll leave

24
00:01:32,460 --> 00:01:37,170
some comments inside in just a moment to give you an idea as to how I'd like you to accomplish this.

25
00:01:37,170 --> 00:01:43,410
The second test is going to be for titling that second to do where the completed value is already equal

26
00:01:43,410 --> 00:01:43,980
to true.

27
00:01:46,130 --> 00:01:56,880
Right here it should clear completed at when to do is not completed.

28
00:01:56,980 --> 00:02:02,790
Perfect this test case is going to make sure that when we go ahead and remove the completed status setting

29
00:02:02,790 --> 00:02:09,330
an equal to false completed at gets cleared know for the first test case what you're going to do is

30
00:02:09,330 --> 00:02:17,910
grab the idea of the first item grab ID of first item and then you're going to make our patch request.

31
00:02:18,010 --> 00:02:22,120
You're going to provide the proper You are all with the idea inside of it and you're going to use send

32
00:02:22,180 --> 00:02:26,280
to send some data along as the request body for this one.

33
00:02:26,280 --> 00:02:33,970
I want you to update the text set it equal to whatever you like and you're going to set completed equal

34
00:02:34,000 --> 00:02:34,800
to true.

35
00:02:35,080 --> 00:02:39,250
Now once you send that off you'll be ready to make your assertions and you're going to make one assertion

36
00:02:39,280 --> 00:02:44,360
using the basic system assert that you get a 200 back and you're going to make one custom assertion

37
00:02:45,300 --> 00:02:52,540
the custom assertion is going to verify that the response body has a text property equal to the text

38
00:02:52,540 --> 00:02:55,640
you sent in text is changed.

39
00:02:56,080 --> 00:03:04,450
You're going to verify that completed is true and you're also going to verify that completed at is a

40
00:03:04,720 --> 00:03:12,700
number and you can use the to be a method available inside of expect to get that done.

41
00:03:12,730 --> 00:03:15,700
Now for the second test we're going to do something similar but we're just going to go in the other

42
00:03:15,700 --> 00:03:16,570
direction.

43
00:03:17,050 --> 00:03:27,170
We're going to grab this should be GRABBE not grad grab ID of second to do item.

44
00:03:27,310 --> 00:03:35,290
You're going to update the text to something different and you're going to set completed to false then

45
00:03:35,290 --> 00:03:36,630
you can make your assertions.

46
00:03:36,640 --> 00:03:42,940
Once again we will be expecting a 200 for this one and we will be expecting that the response body now

47
00:03:42,940 --> 00:03:48,130
represents those changes text is changed to whatever you happen to pick.

48
00:03:48,130 --> 00:03:52,930
I also want you to check that completed is now false.

49
00:03:52,930 --> 00:03:55,240
And to check that completed at

50
00:03:57,920 --> 00:04:06,130
is null and you can use the to not exist method available on expect to make that assertion.

51
00:04:06,140 --> 00:04:08,830
This is what you need to do to complete the test suite.

52
00:04:08,960 --> 00:04:13,710
Once you're done and wanting to run NPM test and make sure both test cases pass.

53
00:04:13,820 --> 00:04:17,360
If they do you're good to go if they don't go ahead and tweak things around.

54
00:04:17,390 --> 00:04:21,770
Feel free to use any code we wrote in any of the projects to get this challenge done.

55
00:04:21,830 --> 00:04:23,710
That goes with every other challenge as well.

56
00:04:23,720 --> 00:04:25,730
You can also use Google or stack overflow.

57
00:04:25,730 --> 00:04:28,130
That is not cheating it's called being resourceful.

58
00:04:28,220 --> 00:04:31,260
And that's what real developers do every single day.

59
00:04:31,280 --> 00:04:37,220
So take a moment knock this out make sure that the proper data comes back based on the data you send

60
00:04:37,220 --> 00:04:42,290
in and when you're done you can go ahead and click play you do.

61
00:04:42,400 --> 00:04:47,630
I know this one was a little open ended but hopefully you were able to get both test cases set up.

62
00:04:47,950 --> 00:04:52,990
Let's fill out the first test case first and I'll kick things off by grabbing the proper ID.

63
00:04:52,990 --> 00:05:00,130
Let's make a variable called hex ID setting it equal to the first to do's underscore ID property and

64
00:05:00,130 --> 00:05:03,300
we're going to call two hex string to get the string back.

65
00:05:03,310 --> 00:05:05,760
We can pass in to the U r l.

66
00:05:05,980 --> 00:05:08,500
Next up I'm going to go ahead and create some dummy text.

67
00:05:08,500 --> 00:05:12,040
This will be the new updated text.

68
00:05:12,060 --> 00:05:15,960
Let's make a variable called text and set it equal to whatever you like.

69
00:05:15,990 --> 00:05:20,210
This should be the new text.

70
00:05:20,220 --> 00:05:26,100
Now we can go ahead and actually make our request using request to our express application.

71
00:05:26,160 --> 00:05:27,980
We will be using the patch method.

72
00:05:28,110 --> 00:05:32,490
Hopefully you were able to figure that out on your own if you weren't maybe you use the documentation

73
00:05:32,490 --> 00:05:37,530
for super test since I did not explicitly tell you how to make that patch call.

74
00:05:37,530 --> 00:05:43,820
Next up we are going to be using a template string as are u r l forward slash to Doo's forward slash.

75
00:05:43,860 --> 00:05:45,930
Then we're going to inject the hex.

76
00:05:45,920 --> 00:05:47,380
I d.

77
00:05:47,400 --> 00:05:51,240
Now before we can make our assertions we do need to send some data along as well.

78
00:05:51,300 --> 00:05:53,870
So I'll call send passing in the data.

79
00:05:53,880 --> 00:05:57,180
This is going to be the things we want to change for this test.

80
00:05:57,180 --> 00:06:00,660
We did want to set completed equal to true.

81
00:06:00,810 --> 00:06:06,990
I'm going to set completed equal to true and we do want to update the text source at the text equal

82
00:06:06,990 --> 00:06:08,810
to the text variable up above.

83
00:06:08,910 --> 00:06:12,770
And I can always leave off this part using yes 6.

84
00:06:12,810 --> 00:06:16,380
Now that we have send in place we can start making our assertions.

85
00:06:16,380 --> 00:06:17,220
The first one is easy.

86
00:06:17,220 --> 00:06:19,000
We're just expecting at 200.

87
00:06:19,350 --> 00:06:22,980
I'm going to expect a two hundred to be the return status code.

88
00:06:22,980 --> 00:06:28,510
And before we add our customer assertion we can call and passing in done.

89
00:06:28,530 --> 00:06:34,530
Now the last thing we need to do is make those assertions about the data coming back right here.

90
00:06:34,530 --> 00:06:39,900
I'm going to call expect passing in a function this function as we know by now gets called with the

91
00:06:39,900 --> 00:06:42,900
response and we can make our custom assertions.

92
00:06:42,900 --> 00:06:49,180
We're going to make an assertion about text completed and completed at first up the text.

93
00:06:49,290 --> 00:06:59,850
We're expecting that the response dot body dot to do dot text property equals using to be the text variable.

94
00:06:59,850 --> 00:07:01,680
We defined up above.

95
00:07:01,680 --> 00:07:05,900
If this is equal to the data that came back then we're going to go next up.

96
00:07:06,060 --> 00:07:09,240
Let's make some assertions about that completed property.

97
00:07:09,390 --> 00:07:18,800
We're going to expect that the response body to do has a completed property and that it's true using

98
00:07:18,840 --> 00:07:20,430
to be true.

99
00:07:20,580 --> 00:07:21,900
We set it to true right here.

100
00:07:21,900 --> 00:07:25,540
So it should have changed from false to true.

101
00:07:25,560 --> 00:07:31,140
Now the last assertion we're going to make inside of our custom expect call is going to be an assertion

102
00:07:31,140 --> 00:07:40,690
about completed and making sure it's a number we're going to expect response body to do dot completed

103
00:07:40,780 --> 00:07:45,370
at equals a number using to be a.

104
00:07:45,940 --> 00:07:49,280
Inside of quotes the type number with this in place.

105
00:07:49,290 --> 00:07:51,490
Our first test is now complete.

106
00:07:51,610 --> 00:07:55,450
We can go ahead and remove those comments and actually verify it's working by running it over in the

107
00:07:55,450 --> 00:07:56,190
terminal.

108
00:07:56,200 --> 00:07:57,850
Our second test is going to fail.

109
00:07:57,910 --> 00:08:00,170
That's fine as long as the first one passes.

110
00:08:00,280 --> 00:08:02,040
We're good at to continue on.

111
00:08:02,080 --> 00:08:03,460
I'm going to run NPM test.

112
00:08:03,460 --> 00:08:05,640
This is going to fire off the test suite.

113
00:08:05,710 --> 00:08:08,330
We can see our first patch test succeeds.

114
00:08:08,380 --> 00:08:11,560
And this is the one we just filled out and our second one fails.

115
00:08:11,650 --> 00:08:16,060
We're getting a time out after two seconds which is expected because we never call done.

116
00:08:16,360 --> 00:08:20,100
Now that the first ones in place that we can go ahead and fill out the second one.

117
00:08:20,260 --> 00:08:24,060
Now the code for these two tasks is going to be really really similar.

118
00:08:24,070 --> 00:08:28,220
Now since we just wrote this code and we know exactly what it does we can copy and paste it.

119
00:08:28,240 --> 00:08:33,610
I'm not a fan of copying and pasting code I don't understand but I am a fan of being efficient since

120
00:08:33,610 --> 00:08:35,030
I know what this code does.

121
00:08:35,050 --> 00:08:36,770
I can paste it right in here.

122
00:08:36,880 --> 00:08:41,880
And now we can go ahead and make some changes instead of grabbing the hex ID for the first to do item.

123
00:08:41,980 --> 00:08:47,710
We want to grab the hex ID for the second to do item and then the next thing we need to do is update

124
00:08:47,830 --> 00:08:49,420
the data we're sending.

125
00:08:49,480 --> 00:08:51,160
We don't want to set completely equal to true.

126
00:08:51,160 --> 00:08:53,490
We already did that manually up above.

127
00:08:53,530 --> 00:08:56,080
This one we're trying to set to False.

128
00:08:57,620 --> 00:09:00,640
We are also going to update the text so we can leave that in place.

129
00:09:00,680 --> 00:09:05,630
I'm going to go ahead and tweak the text value a little bit adding a couple exclamation marks on the

130
00:09:05,630 --> 00:09:06,830
end.

131
00:09:06,830 --> 00:09:11,480
Next up the assertions we're still expecting a 200 to be the status code that comes back.

132
00:09:11,480 --> 00:09:16,350
That part's great and we are still expecting the text to equal the text for completed.

133
00:09:16,350 --> 00:09:21,140
So we're expecting that to be false and we're not expecting completed to be a number.

134
00:09:21,190 --> 00:09:25,640
It was a number originally but after this update it should have gotten cleared since the to do is no

135
00:09:25,640 --> 00:09:26,670
longer completed.

136
00:09:26,840 --> 00:09:32,530
We can use to not exist to assert that completed at it doesn't exist.

137
00:09:32,660 --> 00:09:38,210
With this in place our test case cases done we can now delete those comments save the file and rerun

138
00:09:38,210 --> 00:09:39,910
things from the terminal.

139
00:09:39,980 --> 00:09:41,430
I'm going to rerun the test suite.

140
00:09:41,450 --> 00:09:42,530
And what do we get.

141
00:09:42,560 --> 00:09:45,480
We get both of our patch tests passing.

142
00:09:45,560 --> 00:09:51,290
Now as you've probably noticed a four patch we didn't write those test cases for invalid object IDs

143
00:09:51,290 --> 00:09:53,150
or object IDs not found.

144
00:09:53,210 --> 00:09:58,630
You could add those but we've done them so many times so far I don't see that as a necessary exercise.

145
00:09:58,640 --> 00:10:04,940
These two test cases though they do validate that our patch method is working as expected especially

146
00:10:04,940 --> 00:10:10,130
when it comes to the slightly more complex logic that patch required to get everything done with this

147
00:10:10,130 --> 00:10:13,480
in place though we are done testing our last route.

148
00:10:13,550 --> 00:10:18,020
We can go ahead and make a commit and move on to the final video of the section which is coming up next

149
00:10:18,380 --> 00:10:19,310
over in the terminal.

150
00:10:19,310 --> 00:10:21,520
I'm going to run and get status here.

151
00:10:21,560 --> 00:10:25,580
I see I have one a modified file on my server test file which looks great.

152
00:10:25,700 --> 00:10:35,900
I can use get commit with the flag to make the commit add tests for Pache forward slash twos forward

153
00:10:35,900 --> 00:10:37,620
slash D.

154
00:10:37,730 --> 00:10:41,840
I'm going to go ahead and make that commit then I'll take a moment to push it up to get help.

155
00:10:41,840 --> 00:10:44,120
And with that in place we are done.

156
00:10:44,180 --> 00:10:48,650
I'll see you in the next video which is the last one for the section where you will learn how to use

157
00:10:48,650 --> 00:10:50,990
a separate test database locally.

158
00:10:50,990 --> 00:10:55,800
So you're not always wiping your data in the development database as you run your tests.

159
00:10:55,850 --> 00:10:57,350
That's coming up next so stay tuned.

160
00:10:57,350 --> 00:10:58,640
I will see you then

